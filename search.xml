<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 8]]></title>
      <url>http://yoursite.com/2016/08/12/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-8/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 7]]></title>
      <url>http://yoursite.com/2016/08/12/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-7/</url>
      <content type="html"><![CDATA[<h3 id="实现分页功能"><a href="#实现分页功能" class="headerlink" title="实现分页功能"></a>实现分页功能<hr></h3><p>现在我们给博客的主页和用户页面增加分页功能。</p>
<p>我们设定：主页和用户页面每页最多显示十篇文章。</p>
<p>这里我们要用到 mongodb 的 skip 和 limit 操作，具体可查阅《mongodb权威指南》。</p>
<p>打开 post.js ，把<code class="pale">Post.getAll</code>函数修改如下：</p>
<pre class="default"><code class="default">
//一次获取十篇文章
Post.getTen = function(name, page, callback) {
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      var query = {};
      if (name) {
        query.name = name;
      }
      //使用 count 返回特定查询的文档数 total
      collection.count(query, function (err, total) {
        //根据 query 对象查询，并跳过前 (page-1)&#42;10 个结果，返回之后的 10 个结果
        collection.find(query, {
          skip: (page - 1)&#42;10,
          limit: 10
        }).sort({
          time: -1
        }).toArray(function (err, docs) {
          mongodb.close();
          if (err) {
            return callback(err);
          }
          //解析 markdown 为 html
          docs.forEach(function (doc) {
            doc.post = markdown.toHTML(doc.post);
          });  
          callback(null, docs, total);
        });
      });
    });
  });
};
</code></pre>

<p>打开 index.js ，修改<code class="pale">router.get(&#39;/&#39;, function(req, res, next) {</code>如下：</p>
<pre class="default"><code class="default">
router.get('/', function (req, res) {
  //判断是否是第一页，并把请求的页数转换成 number 类型
  var page = parseInt(req.query.p) || 1;
  //查询并返回第 page 页的 10 篇文章
  Post.getTen(null, page, function (err, posts, total) {
    if (err) {
      posts = [];
    }
    res.render('index', {
      title: '主页',
      posts: posts,
      page: page,
      isFirstPage: (page - 1) == 0,
      isLastPage: ((page - 1) * 10 + posts.length) == total
    });
  });
});
</code></pre>

<p>注意：这里通过<code class="pale">req.query.p</code>获取的页数为字符串形式，我们需要通过<code class="pale">parseInt()</code>把它转换成数字以作后用。同时把<code class="pale">Post.getAll</code>改成了<code class="pale">Post.getTen</code>。</p>
<p>修改<code class="pale">router.get(&#39;/u/:name&#39;)</code>如下：</p>
<pre class="default"><code class="default">
router.get('/u/:name', function (req, res) {
  var page = parseInt(req.query.p) || 1;
  //检查用户是否存在
  User.get(req.params.name, function (err, user) {
    if (!user) {
      req.flash('error', '用户不存在!');
      return res.redirect('/');
    }
    //查询并返回该用户第 page 页的 10 篇文章
    Post.getTen(user.name, page, function (err, posts, total) {
      if (err) {
        req.flash('error', err);
        return res.redirect('/');
      }
      res.render('user', {
        title: user.name,
        posts: posts,
        page: page,
        isFirstPage: (page - 1) == 0,
        isLastPage: ((page - 1) * 10 + posts.length) == total
      });
    });
  });
});
</code></pre>

<p>接下来在 views 文件夹下新建 paging.ejs ，添加如下代码：</p>
<pre class="default"><code class="default">
&lt;br /&gt;
&lt;div&gt;
  &lt;% if (!isFirstPage) { %&gt;
    &lt;span class="prepage"&gt;&lt;a title="上一页" href="?p=&lt;%= page-1 %&gt;"&gt;上一页&lt;/a&gt;&lt;/span&gt;
  &lt;% } %&gt;

  &lt;% if (!isLastPage) { %&gt;
    &lt;span class="nextpage"&gt;&lt;a title="下一页" href="?p=&lt;%= page+1 %&gt;"&gt;下一页&lt;/a&gt;&lt;/span&gt;
  &lt;% } %&gt;
&lt;/div&gt;
</code></pre>

<p>这里通过<code class="pale">if(!isFirstPage)</code>判断是否为第一页，不是第一页则显示 “上一页” ；通过<code class="pale">if(!isLastPage)</code>判断是否为最后一页，不是最后一页则显示 “下一页” 。</p>
<p>接下来在主页和用户页引入分页。修改 index.ejs 和 user.ejs ，在<code class="pale">&lt;%- include footer %&gt;</code>前添加一行代码：</p>
<pre class="default"><code class="default">
&lt;%- include paging %&gt;
</code></pre>

<p>在主页和用户页面引入分页模块。</p>
<p>最后，在 style.css 中添加以下样式：</p>
<pre class="default"><code class="default">
.prepage a {
  float: left;
  text-decoration: none;
  padding: .5em 1em;
  color: #ff0000;
  font-weight: bold;
}

.nextpage a {
  float: right;
  text-decoration: none;
  padding: .5em 1em;
  color: #ff0000;
  font-weight: bold;
}

.prepage a:hover, .nextpage a:hover {
  text-decoration: none;
  background-color: #ff0000;
  color: #f9f9f9;
  -webkit-transition: color .2s linear;
}
</code></pre>

<p>现在，我们实现了博客的分页功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 6]]></title>
      <url>http://yoursite.com/2016/08/12/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-6/</url>
      <content type="html"><![CDATA[<h3 id="实现留言功能"><a href="#实现留言功能" class="headerlink" title="实现留言功能"></a>实现留言功能<hr></h3><p>一个完整的博客怎么能缺少留言功能呢，当然我们可以用第三方社会化评论插件，既然我们有了数据库，我们不妨把留言保存到自己的数据库里。</p>
<p>我们设定：只有在文章页面才会显示留言板。</p>
<p>打开 post.js ，修改<code class="pale">Post.prototype.save</code>中要存入的文档为：</p>
<pre class="default"><code class="default">
var post = {
    name: this.name,
    time: time,
    title:this.title,
    post: this.post,
    comments: []
};
</code></pre>

<p>我们在文档里增加了 comments 键（数组），用来存储此文章上的留言（一个个对象）。为了也让留言支持 markdown 语法，我们将<code class="pale">Post.getOne</code>函数里的：</p>
<pre class="default"><code class="default">
doc.post = markdown.toHTML(doc.post);
</code></pre>

<p>修改为：</p>
<pre class="default"><code class="default">
if (doc) {
  doc.post = markdown.toHTML(doc.post);
  doc.comments.forEach(function (comment) {
    comment.content = markdown.toHTML(comment.content);
  });
}
</code></pre>

<p>接下来我们在 models 下新建 comment.js 文件，添加如下代码：</p>
<pre class="default"><code class="default">
var mongodb = require('./db');

function Comment(name, day, title, comment) {
  this.name = name;
  this.day = day;
  this.title = title;
  this.comment = comment;
}

module.exports = Comment;

//存储一条留言信息
Comment.prototype.save = function(callback) {
  var name = this.name,
      day = this.day,
      title = this.title,
      comment = this.comment;
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      //通过用户名、时间及标题查找文档，并把一条留言对象添加到该文档的 comments 数组里
      collection.update({
        "name": name,
        "time.day": day,
        "title": title
      }, {
        $push: {"comments": comment}
      } , function (err) {
          mongodb.close();
          if (err) {
            return callback(err);
          }
          callback(null);
      });   
    });
  });
};
</code></pre>

<p>修改 index.js ，在<code class="pale">Post = require(&#39;../models/post.js&#39;)</code>后添加一行代码：</p>
<pre class="default"><code class="default">
Comment = require('../models/comment.js');
</code></pre>

<p>这里我们创建了 comment 的模型文件，用于存储新的留言到数据库，并在 index.js 中引入以作后用。</p>
<p>接下来我们创建 comment 的视图文件，在 views 文件夹下新建 comment.ejs ，添加如下代码(e.g. 首先要先插入一个留言再显示)：</p>
<pre class="default"><code class="default">
&lt;br /&gt;
&lt;% post.comments.forEach(function (comment, index) { %&gt;
  &lt;p&gt;&lt;a href="&lt;%= comment.website %&gt;"&gt;&lt;%= comment.name %&gt;&lt;/a&gt;
  &lt;span class="info"&gt; 回复于 &lt;%= comment.time %&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;p&gt;&lt;%- comment.content %&gt;&lt;/p&gt;
&lt;% }) %&gt;

&lt;form method="post" action="/u/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;
&lt;% if (user) { %&gt;
  姓名：&lt;input type="text" name="name" value="&lt;%= user.name %&gt;" /&gt;&lt;br /&gt;
  邮箱：&lt;input type="text" name="email" value="&lt;%= user.email %&gt;" /&gt;&lt;br /&gt;
  网址：&lt;input type="text" name="website" value="/u/&lt;%= user.name %&gt;" /&gt;&lt;br /&gt;
&lt;% } else { %&gt;
  姓名：&lt;input type="text" name="name" /&gt;&lt;br /&gt;
  邮箱：&lt;input type="text" name="email" /&gt;&lt;br /&gt;
  网址：&lt;input type="text" name="website" value="http://" /&gt;&lt;br /&gt;
&lt;% } %&gt;
  &lt;textarea name="content" rows="5" cols="80"&gt;&lt;/textarea&gt;&lt;br /&gt;
  &lt;input type="submit" value="留言" /&gt;
&lt;/form&gt;
</code></pre>

<p>注意：这里根据用户登录状态的不同，显示不同的提示信息。还需注意的一点是，未登录的用户在留言的时候， 网址 这一项需要加上<code class="pale">http://</code>前缀，否则在生成连接的时候会基于当前 url （本地是 localhost:3000）。</p>
<p>打开 article.ejs ，在<code class="pale">&lt;%- include footer %&gt;</code>前添加一行代码：</p>
<pre class="default"><code class="default">
&lt;%- include comment %&gt;
</code></pre>

<p>这样我们就在文章页面引入了留言模块。</p>
<p>最后，修改 index.js ，注册留言的 POST 响应，在<code class="pale">router.get(&#39;/u/:name/:day/:title&#39;)</code>后添加如下代码：</p>
<pre class="default"><code class="default">
router.post('/u/:name/:day/:title', function (req, res) {
  var date = new Date(),
      time = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +
             date.getHours() + ":" + (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes());
  var comment = {
      name: req.body.name,
      email: req.body.email,
      website: req.body.website,
      time: time,
      content: req.body.content
  };
  var newComment = new Comment(req.params.name, req.params.day, req.params.title, comment);
  newComment.save(function (err) {
    if (err) {
      req.flash('error', err);
      return res.redirect('back');
    }
    req.flash('success', '留言成功!');
    res.redirect('back');
  });
});
</code></pre>

<p>注意：这里我们使用<code class="pale">res.redirect(&#39;back&#39;);</code>，即留言成功后返回到该文章页。</p>
<p>现在，我们就给博客添加了留言的功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 5]]></title>
      <url>http://yoursite.com/2016/08/12/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-5/</url>
      <content type="html"><![CDATA[<h3 id="增加编辑与删除功能"><a href="#增加编辑与删除功能" class="headerlink" title="增加编辑与删除功能"></a>增加编辑与删除功能<hr></h3><p>现在，我们来给博客添加编辑文章与删除文章的功能。</p>
<p>我们设定：当一个用户在线时，只允许他在自己发表的文章页进行编辑或删除，编辑时，只能编辑文章内容，不能编辑文章标题。</p>
<p>打开 style.css ，添加如下样式：</p>
<pre class="default"><code class="default">
.edit {
  margin: 3px;
  padding: 2px 5px;
  border-radius: 3px;
  background-color: #f3f3f3;
  color: #333;
  font-size: 13px;
}

.edit:hover {
  text-decoration: none;
  background-color: #f00;
  color: #fff;
  -webkit-transition: color .2s linear;
}
</code></pre>

<p>打开 article.ejs ，将代码修改成如下：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;p&gt;
  &lt;span&gt;
    &lt;a class="edit" href="/edit/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;编辑&lt;/a&gt;
  &lt;/span&gt;
  &lt;span&gt;
    &lt;a class="edit" href="/remove/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;删除&lt;/a&gt;
  &lt;/span&gt;
&lt;/p&gt;
&lt;p class="info"&gt;
  作者：&lt;a href="/u/&lt;%= post.name %&gt;"&gt;&lt;%= post.name %&gt;&lt;/a&gt; |
  日期：&lt;%= post.time.minute %&gt;
&lt;/p&gt;
&lt;p&gt;&lt;%- post.post %&gt;&lt;/p&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>至此，我们只是在文章页面添加了编辑和删除文章的链接。接下来，我们注册这两个链接的点击事件的响应。</p>
<p>打开 post.js ，在最后添加如下代码：</p>
<pre class="default"><code class="default">
//返回原始发表的内容（markdown 格式）
Post.edit = function(name, day, title, callback) {
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      //根据用户名、发表日期及文章名进行查询
      collection.findOne({
        "name": name,
        "time.day": day,
        "title": title
      }, function (err, doc) {
        mongodb.close();
        if (err) {
          return callback(err);
        }
        callback(null, doc);//返回查询的一篇文章（markdown 格式）
      });
    });
  });
};
</code></pre>

<p>打开 index.js ，在<code class="pale">router.get(&#39;/u/:name/:day/:title&#39;)</code>后添加如下代码：</p>
<pre class="default"><code class="default">
router.get('/edit/:name/:day/:title', checkLogin);
router.get('/edit/:name/:day/:title', function (req, res) {
  var currentUser = req.session.user;
  Post.edit(currentUser.name, req.params.day, req.params.title, function (err, post) {
    if (err) {
      req.flash('error', err);
      return res.redirect('back');
    }
    res.render('edit', {
      title: '编辑',
      post: post
    });
  });
});
</code></pre>

<p>在 views 下新建 edit.ejs ，添加如下代码：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;form method="post" action="/edit/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;
  标题：&lt;br /&gt;
  &lt;input type="text" name="title" value="&lt;%= post.title %&gt;" disabled="disabled" /&gt;&lt;br /&gt;
  正文：&lt;br /&gt;
  &lt;textarea name="post" rows="20" cols="100"&gt;&lt;%= post.post %&gt;&lt;/textarea&gt;&lt;br /&gt;
  &lt;input type="submit" value="保存修改" /&gt;
&lt;/form&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>现在，运行我们的博客看看吧。在文章页面，当我们点击 编辑 后就会跳转到该文章对应的编辑页面了。接下来我们实现将修改后的文章提交到数据库。</p>
<p>打开 post.js ，在最后添加如下代码：</p>
<pre class="default"><code class="default">
//更新一篇文章及其相关信息
Post.update = function(name, day, title, post, callback) {
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      //更新文章内容
      collection.update({
        "name": name,
        "time.day": day,
        "title": title
      }, {
        $set: {post: post}
      }, function (err) {
        mongodb.close();
        if (err) {
          return callback(err);
        }
        callback(null);
      });
    });
  });
};
</code></pre>

<p>打开 index.js ，在<code class="pale">router.get(&#39;/edit/:name/:day/:title&#39;)</code>后添加如下代码：</p>
<pre class="default"><code class="default">
router.post('/edit/:name/:day/:title', checkLogin);
router.post('/edit/:name/:day/:title', function (req, res) {
  var currentUser = req.session.user;
  Post.update(currentUser.name, req.params.day, req.params.title, req.body.post, function (err) {
    var url = encodeURI('/u/' + req.params.name + '/' + req.params.day + '/' + req.params.title);
    if (err) {
      req.flash('error', err);
      return res.redirect(url);//出错！返回文章页
    }
    req.flash('success', '修改成功!');
    res.redirect(url);//成功！返回文章页
  });
});
</code></pre>

<p>现在，我们就可以编辑并保存文章了。赶紧试试吧！</p>
<p>接下来，我们实现删除文章的功能。打开 post.js ，在最后添加如下代码：</p>
<pre class="default"><code class="default">
//删除一篇文章
Post.remove = function(name, day, title, callback) {
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      //根据用户名、日期和标题查找并删除一篇文章
      collection.remove({
        "name": name,
        "time.day": day,
        "title": title
      }, {
        w: 1
      }, function (err) {
        mongodb.close();
        if (err) {
          return callback(err);
        }
        callback(null);
      });
    });
  });
};
</code></pre>

<p>打开 index.js ，在<code class="pale">router.get(&#39;/edit/:name/:day/:title&#39;)</code>后添加如下代码：</p>
<pre class="default"><code class="default">
router.get('/remove/:name/:day/:title', checkLogin);
router.get('/remove/:name/:day/:title', function (req, res) {
  var currentUser = req.session.user;
  Post.remove(currentUser.name, req.params.day, req.params.title, function (err) {
    if (err) {
      req.flash('error', err);
      return res.redirect('back');
    }
    req.flash('success', '删除成功!');
    res.redirect('/');
  });
});
</code></pre>

<p>至此我们完成了大部分的工作，接下来我们实现页面权限的控制。假如你现在注册了两个帐号 A 和 B，那么当 B 访问 A 的用户页面时，也会出现编辑和删除的选项，虽然点击后并不能编辑和删除 A 的文章。那怎么才能实现一个账号只能编辑和删除自己发表的文章呢？很简单，添加一个判断即可。打开 article.ejs ，将：</p>
<pre class="default"><code class="default">
&lt;span&gt;
  &lt;a class="edit" href="/edit/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;编辑&lt;/a&gt;
&lt;/span&gt;
&lt;span&gt;
  &lt;a class="edit" href="/remove/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;删除&lt;/a&gt;
&lt;/span&gt;
</code></pre>

<p>修改为：</p>
<pre class="default"><code class="default">
&lt;% if (user && (user.name == post.name)) { %&gt;
  &lt;span&gt;
    &lt;a class="edit" href="/edit/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;编辑&lt;/a&gt;
  &lt;/span&gt;
  &lt;span&gt;
    &lt;a class="edit" href="/remove/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;删除&lt;/a&gt;
  &lt;/span&gt;
&lt;% } %&gt;
</code></pre>

<p>以上代码的意思是：通过检测 session 中的用户名是否存在，若存在且和当前文章页面的作者名相同，则显示编辑和删除按钮，否则不显示。</p>
<p>现在，我们完成了给博客添加编辑文章与删除文章的功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 4]]></title>
      <url>http://yoursite.com/2016/08/12/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-4/</url>
      <content type="html"><![CDATA[<h3 id="实现用户页面和文章页面"><a href="#实现用户页面和文章页面" class="headerlink" title="实现用户页面和文章页面"></a>实现用户页面和文章页面<hr></h3><p>现在，我们来给博客添加用户页面和文章页面。</p>
<p>所谓用户页面就是当点击某个用户名链接时，跳转到：<code class="pale">域名/u/用户名</code>，并列出该用户的所有文章。<br>同理，文章页面就是当点击某篇文章标题时，跳转到：<code class="pale">域名/u/用户名/时间/文章名</code>，进入到该文章的页面（也许还有该文章<br>的评论等）。</p>
<p>在开始之前我们需要做一个工作，打开 post.js ，将<code class="pale">Post.get</code>修改为<code class="pale">Post.getAll</code>，同时将 index.js 中<code class="pale">Post.get</code>修改为<br><code class="pale">Post.getAll</code>。在 post.js 最后添加如下代码：</p>
<pre class="default"><code class="default">
//获取一篇文章
Post.getOne = function(name, day, title, callback) {
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      //根据用户名、发表日期及文章名进行查询
      collection.findOne({
        "name": name,
        "time.day": day,
        "title": title
      }, function (err, doc) {
        mongodb.close();
        if (err) {
          return callback(err);
        }
        //解析 markdown 为 html
        doc.post = markdown.toHTML(doc.post);
        callback(null, doc);//返回查询的一篇文章
      });
    });
  });
};
</code></pre>

<p>简单解释一下：</p>
<ul>
<li><code class="pale">Post.getAll</code>：获取一个人的所有文章（传入参数 name）或获取所有人的文章（不传入参数）。</li>
<li><code class="pale">Post.getOne</code>：根据用户名、发表日期及</li>
</ul>
<p>下面我们来实现用户页面和文章页面。</p>
<p>打开 index.js ，在<code class="pale">router.post(&#39;/upload&#39;)</code>后添加如下代码：</p>
<pre class="default"><code class="default">
router.get('/u/:name', function (req, res) {
  //检查用户是否存在
  User.get(req.params.name, function (err, user) {
    if (!user) {
      req.flash('error', '用户不存在!');
      return res.redirect('/');//用户不存在则跳转到主页
    }
    //查询并返回该用户的所有文章
    Post.getAll(user.name, function (err, posts) {
      if (err) {
        req.flash('error', err);
        return res.redirect('/');
      }
      res.render('user', {
        title: user.name,
        posts: posts
      });
    });
  });
});
</code></pre>

<p>这里我们添加了一条路由规则<code class="pale">router.get(&#39;/u/:name&#39;)</code>，用来处理访问用户页的请求，然后从数据库取得该用户的数据并渲染 user.ejs 模版，生成页面并显示给用户。</p>
<p>接下来我们添加文章页面的路由规则。<br>在<code class="pale">router.get(&#39;/u/:name&#39;)</code>后添加如下代码：</p>
<pre class="default"><code class="default">
router.get('/u/:name/:day/:title', function (req, res) {
  Post.getOne(req.params.name, req.params.day, req.params.title, function (err, post) {
    if (err) {
      req.flash('error', err);
      return res.redirect('/');
    }
    res.render('article', {
      title: req.params.title,
      post: post
    });
  });
});
</code></pre>

<p>最后，我们创建用户页面和文章页面的模版文件。</p>
<p>在 views 文件夹下新建 user.ejs，添加如下代码，同时也将 index.ejs 也修改成如下代码：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;% posts.forEach(function (post, index) { %&gt;
  &lt;p&gt;&lt;h2&gt;&lt;a href="/u/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/h2&gt;&lt;/p&gt;
  &lt;p class="info"&gt;
    作者：&lt;a href="/u/&lt;%= post.name %&gt;"&gt;&lt;%= post.name %&gt;&lt;/a&gt; |
    日期：&lt;%= post.time.minute %&gt;
  &lt;/p&gt;
  &lt;p&gt;&lt;%- post.post %&gt;&lt;/p&gt;
&lt;% }) %&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>在 views 文件夹下新建 article.ejs ，添加如下代码：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;p class="info"&gt;
  作者：&lt;a href="/u/&lt;%= post.name %&gt;"&gt;&lt;%= post.name %&gt;&lt;/a&gt; |
  日期：&lt;%= post.time.minute %&gt;
&lt;/p&gt;
&lt;p&gt;&lt;%- post.post %&gt;&lt;/p&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>然后将 index.ejs 中的 href 更改如下：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;div class="hero-unit"&gt;
  &lt;h1&gt;欢迎来到 简易博客&lt;/h1&gt;
  &lt;p&gt;简易博客 是一个基于 Node.js 的微博系统。&lt;/p&gt;
  &lt;p&gt;
    &lt;a class="btn btn-primary btn-large" href="/login"&gt;登录&lt;/a&gt;
    &lt;a class="btn btn-large" href="/reg"&gt;立即注册&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;% posts.forEach(function (post, index) { %&gt;
  &lt;p&gt;&lt;h2&gt;&lt;a href="u/&lt;%= post.name %&gt;/&lt;%= post.time.day %&gt;/&lt;%= post.title %&gt;"&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/h2&gt;&lt;/p&gt;
  &lt;p class="info"&gt;
    作者：&lt;a href="u/&lt;%= post.name %&gt;"&gt;&lt;%= post.name %&gt;&lt;/a&gt; |
    日期：&lt;%= post.time.minute %&gt;
  &lt;/p&gt;
  &lt;p&gt;&lt;%- post.post %&gt;&lt;/p&gt;
&lt;% }) %&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>现在，我们给博客添加了用户页面和文章页面。示例：</p>
<p>用户页面<br><img src="/img/blog/4.1.png" alt=""></p>
<p>文章页面<br><img src="/img/blog/4.2.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 3]]></title>
      <url>http://yoursite.com/2016/08/11/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-3/</url>
      <content type="html"><![CDATA[<h3 id="增加文件上传功能"><a href="#增加文件上传功能" class="headerlink" title="增加文件上传功能"></a>增加文件上传功能<hr></h3><p>一个完整的博客怎么能缺少图片呢？现在，我们来给博客添加文件上传功能，这样我们就可以使用 markdown 来链接图片了。</p>
<p>我们使用express的第三方中间件 multer 实现文件上传功能。打开 package.json，在命令行输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save multer</div></pre></td></tr></table></figure></p>
<p>安装模块。然后修改 index.js，添加：</p>
<pre class="default"><code class="default">
var multer  = require('multer');
var storage = multer.diskStorage({
    destination: function (req, file, cb){
        cb(null, './public/images')
    },
    filename: function (req, file, cb){
        cb(null, file.originalname)
    }
});
var upload = multer({
    storage: storage
});
</code></pre>

<p>其中，destination 是上传的文件所在的目录，filename 函数用来修改上传后的文件名，这里设置为保持原来的文件名。</p>
<p>打开 header.ejs ，在<code class="pale">&lt;li&gt;&lt;a href=”/post”&gt;发表&lt;/a&gt;&lt;/li&gt;</code>前添加一行代码：</p>
<pre class="default"><code class="default">
&lt;li&gt;&lt;a href="/upload"&gt;上传&lt;/a&gt;&lt;/li&gt;
</code></pre>

<p>然后打开 index.js ，在<code class="pale">router.get(&#39;/logout&#39;, function(req, res, next)</code>函数后添加如下代码：</p>
<pre class="default"><code class="default">
router.get('/upload', checkLogin);
router.get('/upload', function(req, res, next) {
  res.render('upload', { title: '文件上传' });
});
</code></pre>

<p>注意：我们设置<code class="pale">router.get(&#39;/upload&#39;, checkLogin);</code>限制只有登陆的用户才能上传文件。</p>
<p>接下来，我们在 views 文件夹下新建 upload.ejs ，添加如下代码：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;form method='post' action='/upload' enctype='multipart/form-data' &gt;
  &lt;fieldset&gt;
    &lt;legend&gt;文件上传&lt;/legend&gt;
    &lt;input type="file" multiple name='field1'/&gt;&lt;br&gt;
    &lt;input type="file" multiple name='field1'/&gt;&lt;br&gt;
    &lt;input type="file" multiple name='field1'/&gt;&lt;br&gt;
    &lt;input type="file" multiple name='field1'/&gt;&lt;br&gt;
    &lt;input type="file" multiple name='field1'/&gt;&lt;br&gt;
    &lt;button type="submit" class="btn btn-success"&gt;提交&lt;/button&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>现在我们就可以访问文件上传页面了。IE可能会产生多文件上传兼容问题。清空数据库，重新注册登录后，上传文件页面如下图： 页面未修改，实际上应该只剩下一个上传控件显示（新修改的）</p>
<p>我们现在只是有了一个可以上传文件的表单而已，并不能上传文件，接下来我们添加对上传文件的支持。</p>
<p>在<code class="pale">router.get(&#39;/upload&#39;, function(req, res, next)</code>后添加如下代码：</p>
<pre class="default"><code class="default">
router.post('/upload', checkLogin);
router.post('/upload', upload.array('field1', 5), function(req, res, next) {
  req.flash('success', '文件上传成功!');
  res.redirect('/upload');
});
</code></pre>

<p>其中，第一个参数array表示可以同时上传多个文件，第二个参数5表示最多上传5个文件 注意：假如从桌面启动的博客上传图片时失败，尝试在命令行中从博客根目录下启动。</p>
<p>现在，我们给博客添加了文件上传功能。假如我们上传了一张名为<code class="pale">nucifera.gif</code>的图片，示例：</p>
<p>发表前<br><img src="/img/blog/3.1.png" alt=""></p>
<p>发表后<br><img src="/img/blog/3.2.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 2]]></title>
      <url>http://yoursite.com/2016/08/11/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-2/</url>
      <content type="html"><![CDATA[<h3 id="使用-Markdown"><a href="#使用-Markdown" class="headerlink" title="使用 Markdown"></a>使用 Markdown<hr></h3><p>现在我们来给博客添加支持 markdown 发表文章的功能。<br>假如你不还熟悉 markdown，请转到：<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></p>
<p>打开命令行，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save markdown</div></pre></td></tr></table></figure></p>
<p>安装 markdown 模块。</p>
<p>打开 post.js，在<code class="pale">mongodb = require(&#39;./db&#39;)</code>后添加一行代码：</p>
<pre class="default"><code class="default">
markdown = require('markdown').markdown;
</code></pre>

<p>在<code class="pale">Post.get</code>函数里的<code class="pale">callback(null, docs);</code>前添加以下代码：</p>
<pre class="default"><code class="default">
//解析 markdown 为 html
docs.forEach(function (doc) {
  doc.post = markdown.toHTML(doc.post);
});
</code></pre>

<p>现在我们就可以使用 markdown 发表文章了。</p>
<p>注意：每当我们给博客添加新功能后，都要清空数据库（即删除 mongodb/blog 文件夹里所有文件）再启动我们的博客。以后每一章都是如此，后面便不再赘述。</p>
<p>运行我们的博客，如图所示：</p>
<p>发表前<br><img src="/img/blog/2.1.png" alt=""></p>
<p>发表后<br><img src="/img/blog/2.2.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.6]]></title>
      <url>http://yoursite.com/2016/08/11/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-1-6/</url>
      <content type="html"><![CDATA[<h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章<hr></h3><p>现在我们的博客已经具备了用户注册、登陆、页面权限控制的功能，接下来我们完成博客最核心的部分——发表文章。在这一节，我们将会实现发表文章的功能，完成整个博客的设计。<br><br></p>
<h4 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h4><p><br><br>我们先来完成发表页的页面设计。在 views 文件夹下新建 post.ejs ，添加如下代码：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;form method="post"&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;发表&lt;/legend&gt;
    标题：&lt;br /&gt;
    &lt;input type="text" name="title" /&gt;&lt;br /&gt;
    正文：&lt;br /&gt;
    &lt;textarea class="post" name="post" rows="20"&gt;&lt;/textarea&gt;&lt;br /&gt;
    &lt;button type="submit" class="btn btn-success"&gt;
      &lt;i class="icon-comment icon-white"&gt;&lt;/i&gt; 发表
    &lt;/button&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>修改 public/stylesheets/style.css 如下：</p>
<pre class="default"><code class="default">
body {
  padding-top: 60px;
  padding-bottom: 40px;
}

.post {
  width: 926px;
}
</code></pre>

<p><br></p>
<h4 id="文章模型"><a href="#文章模型" class="headerlink" title="文章模型"></a>文章模型</h4><p><br><br>仿照用户模型，我们将文章模型命名为 Post 对象，它拥有与 User 相似的接口，分别是<code class="pale">Post.get</code>和<code class="pale">Post.prototype.save</code>。<br><code class="pale">Post.get</code>的功能是从数据库中获取文章，可以按指定用户获取，也可以获取全部的内容。<code class="pale">Post.prototype.save</code>是 Post 对象原型的方法，用来将文章保存到数据库。</p>
<p>在 models 文件夹下新建 post.js ，添加如下代码：</p>
<pre class="default"><code class="default">
var mongodb = require('./db');

function Post(name, title, post) {
  this.name = name;
  this.title = title;
  this.post = post;
}

module.exports = Post;

//存储一篇文章及其相关信息
Post.prototype.save = function(callback) {
  var date = new Date();
  //存储各种时间格式，方便以后扩展
  var time = {
      date: date,
      year : date.getFullYear(),
      month : date.getFullYear() + "-" + (date.getMonth() + 1),
      day : date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate(),
      minute : date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +
      date.getHours() + ":" + (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes())
  }
  //要存入数据库的文档
  var post = {
      name: this.name,
      time: time,
      title: this.title,
      post: this.post
  };
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      //将文档插入 posts 集合
      collection.insert(post, {
        safe: true
      }, function (err) {
        mongodb.close();
        if (err) {
          return callback(err);//失败！返回 err
        }
        callback(null);//返回 err 为 null
      });
    });
  });
};

//读取文章及其相关信息
Post.get = function(name, callback) {
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);
    }
    //读取 posts 集合
    db.collection('posts', function(err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);
      }
      var query = {};
      if (name) {
        query.name = name;
      }
      //根据 query 对象查询文章
      collection.find(query).sort({
        time: -1
      }).toArray(function (err, docs) {
        mongodb.close();
        if (err) {
          return callback(err);//失败！返回 err
        }
        callback(null, docs);//成功！以数组形式返回查询的结果
      });
    });
  });
};
</code></pre>

<p><br></p>
<h4 id="发表响应"><a href="#发表响应" class="headerlink" title="发表响应"></a>发表响应</h4><p><br><br>接下来我们给发表文章注册响应，打开 index.js ，在<code class="pale">User = require(&#39;../models/user.js&#39;)</code>后添加一行代码：</p>
<pre class="default"><code class="default">
,Post = require('../models/post.js');
</code></pre>

<p>修改<code class="pale">router.post(&#39;/post&#39;, function(req, res, next)</code>如下：</p>
<pre class="default"><code class="default">
router.post('/post', checkLogin);
router.post('/post', function(req, res, next) {
  var currentUser = req.session.user,
      post = new Post(currentUser.name, req.body.title, req.body.post);
  post.save(function (err) {
    if (err) {
      req.flash('error', err);
      return res.redirect('/');
    }
    req.flash('success', '发布成功!');
    res.redirect('/');//发表成功跳转到主页
  });
});
</code></pre>

<p>最后，我们修改 index.ejs ，让主页右侧显示发表过的文章及其相关信息。</p>
<p>打开 index.ejs ，修改如下：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;%- include alert %&gt;
&lt;div class="hero-unit"&gt;
  &lt;h1&gt;欢迎来到 简易博客&lt;/h1&gt;
  &lt;p&gt;简易博客 是一个基于 Node.js 的微博系统。&lt;/p&gt;
  &lt;p&gt;
    &lt;a class="btn btn-primary btn-large" href="/login"&gt;登录&lt;/a&gt;
    &lt;a class="btn btn-large" href="/reg"&gt;立即注册&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;% posts.forEach(function (post, index) { %&gt;
  &lt;p&gt;&lt;h2&gt;&lt;a href="#"&gt;&lt;%= post.title %&gt;&lt;/a&gt;&lt;/h2&gt;&lt;/p&gt;
  &lt;p class="info"&gt;
    作者：&lt;a href="#"&gt;&lt;%= post.name %&gt;&lt;/a&gt; |
    日期：&lt;%= post.time.minute %&gt;
  &lt;/p&gt;
  &lt;p&gt;&lt;%- post.post %&gt;&lt;/p&gt;
&lt;% }) %&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>打开 index.js ，修改 app.get(‘/‘) 如下：</p>
<pre class="default"><code class="default">
router.get('/', function(req, res, next) {
  Post.get(null, function (err, posts) {
    if (err) {
      posts = [];
    }
    res.render('index', {
      title: '首页',
      posts: posts
    });
  });
});
</code></pre>

<p>至此，我们的博客就建成了。</p>
<p>启动我们的博客，发表一篇博文，如图所示:<br><img src="/img/blog/1.13.png" alt=""></p>
<p>此时，查看一下数据库，如图所示：<br><img src="/img/blog/1.14.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.5]]></title>
      <url>http://yoursite.com/2016/08/11/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-1-5/</url>
      <content type="html"><![CDATA[<h3 id="页面权限控制"><a href="#页面权限控制" class="headerlink" title="页面权限控制"></a>页面权限控制<hr></h3><p>我们虽然已经完成了用户注册与登陆的功能，但并不能阻止比如已经登陆的用户访问 localhost:3000/reg 页面，读者可亲自尝试下。为此，我们需要为页面设置访问权限。即注册和登陆页面应该阻止已登陆的用户访问，登出及后面我们将要实现的发表页只对已登录的用户开放。如何实现页面权限的控制呢？我们可以把用户登录状态的检查放到路由中间件中，在每个路径前增加路由中间件，即可实现页面权限控制。我们添加<code class="pale">checkNotLogin</code>和<code class="pale">checkLogin</code>函数来实现这个功能。</p>
<pre class="default"><code class="default">
function checkLogin(req, res, next) {
  if (!req.session.user) {
    req.flash('error', '未登录!');
    res.redirect('/login');
  }
  next();
}

function checkNotLogin(req, res, next) {
  if (req.session.user) {
    req.flash('error', '已登录!');
    res.redirect('back');//返回之前的页面
  }
  next();
}
</code></pre>

<p><code class="pale">checkNotLogin</code>和<code class="pale">checkLogin</code>用来检测是否登陆，并通过<code class="pale">next()</code>转移控制权，检测到未登录则跳转到登录页，检测到已登录则跳转到前一个页面。</p>
<p>最终 index.js 代码如下：</p>
<pre class="default"><code class="default">
var express = require('express'),
    router = express.Router(),
    crypto = require('crypto'),
    User = require('../models/user.js');

&#47;&#42; GET home page. &#42;&#47;
router.get('/', function(req, res, next) {
  res.render('index', { title: '首页' });
});

router.get('/reg', checkNotLogin);
router.get('/reg', function(req, res, next) {
  res.render('reg', { title: '注册' });
});

router.post('/reg', checkNotLogin);
router.post('/reg', function(req, res, next) {
  var name = req.body.name,
      password = req.body.password,
      password_re = req.body['password-repeat'];
  //检验用户两次输入的密码是否一致
  if (password_re != password) {
    req.flash('error', '两次输入的密码不一致!');
    return res.redirect('/reg');//返回注册页
  }
  //生成密码的 md5 值
  var md5 = crypto.createHash('md5'),
      password = md5.update(req.body.password).digest('hex');
  var newUser = new User({
      name: name,
      password: password,
      email: req.body.email
  });
  //检查用户名是否已经存在
  User.get(newUser.name, function (err, user) {
    if (err) {
      req.flash('error', err);
      return res.redirect('/');
    }
    if (user) {
      req.flash('error', '用户已存在!');
      return res.redirect('/reg');//返回注册页
    }
    //如果不存在则新增用户
    newUser.save(function (err, user) {
      if (err) {
        req.flash('error', err);
        return res.redirect('/reg');//注册失败返回主册页
      }
      req.session.user = newUser;//用户信息存入 session
      req.flash('success', '注册成功!');
      res.redirect('/');//注册成功后返回主页
    });
  });
});

router.get('/login', checkNotLogin);
router.get('/login', function(req, res, next) {
  res.render('login', { title: '登入' });
});

router.post('/login', checkNotLogin);
router.post('/login', function(req, res, next) {
  //生成密码的 md5 值
  var md5 = crypto.createHash('md5'),
      password = md5.update(req.body.password).digest('hex');
  //检查用户是否存在
  User.get(req.body.name, function (err, user) {
    if (!user) {
      req.flash('error', '用户不存在!');
      return res.redirect('/login');//用户不存在则跳转到登录页
    }
    //检查密码是否一致
    if (user.password != password) {
      req.flash('error', '密码错误!');
      return res.redirect('/login');//密码错误则跳转到登录页
    }
    //用户名密码都匹配后，将用户信息存入 session
    req.session.user = user;
    req.flash('success', '登陆成功!');
    res.redirect('/');//登陆成功后跳转到主页
  });
});

router.get('/post', checkLogin);
router.get('/post', function(req, res, next) {
  res.render('post', { title: '发表' });
});

router.post('/post', checkLogin);
router.post('/post', function(req, res, next) {

});

router.get('/logout', checkLogin);
router.get('/logout', function(req, res, next) {
  req.session.user = null;
  req.flash('success', '登出成功!');
  res.redirect('/');//登出成功后跳转到主页
});

function checkLogin(req, res, next) {
  if (!req.session.user) {
    req.flash('error', '未登录!');
    res.redirect('/login');
  }
  next();
}

function checkNotLogin(req, res, next) {
  if (req.session.user) {
    req.flash('error', '已登录!');
    res.redirect('back');//返回之前的页面
  }
  next();
}

module.exports = router;
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.4]]></title>
      <url>http://yoursite.com/2016/08/09/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-1-4/</url>
      <content type="html"><![CDATA[<h3 id="注册和登陆"><a href="#注册和登陆" class="headerlink" title="注册和登陆"></a>注册和登陆<hr></h3><p>我们已经准备好了数据库访问和会话的相关信息，接下来我们完成用户注册和登录功能。<br><br></p>
<h4 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h4><p><br>首先我们来完成主页、登录页和注册页的页面设计。</p>
<p>修改 views/index.ejs 如下：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;div class="hero-unit"&gt;
  &lt;h1&gt;欢迎来到 简易博客&lt;/h1&gt;
  &lt;p&gt;简易博客 是一个基于 Node.js 的微博系统。&lt;/p&gt;
  &lt;p&gt;
    &lt;a class="btn btn-primary btn-large" href="/login"&gt;登录&lt;/a&gt;
    &lt;a class="btn btn-large" href="/reg"&gt;立即注册&lt;/a&gt;
  &lt;/p>
&lt;/div&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>在 views 文件夹下新建 header.ejs，添加如下代码：</p>
<pre class="default"><code class="default">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;
    &lt;link rel="stylesheet" href="/stylesheets/bootstrap.css"&gt;
    &lt;link rel="stylesheet" href="/stylesheets/style.css"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="navbar navbar-fixed-top"&gt;
      &lt;div class="navbar-inner"&gt;
        &lt;div class="container"&gt;
          &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/a&gt;
          &lt;a class="brand" href="/"&gt;简易博客&lt;/a&gt;
          &lt;div class="nav-collapse"&gt;
            &lt;ul class="nav"&gt;
              &lt;li class="active"&gt;&lt;a href="/"&gt;首页&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="/login"&gt;发表&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href="/reg"&gt;登出&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="container" class="container"&gt;
</code></pre>

<p>新建 footer.ejs，添加如下代码：</p>
<pre class="default"><code class="default">
      &lt;hr /&gt;
      &lt;footer&gt;
        &lt;p&gt;&lt;a href="http://whshqy.github.io/" target="&#95;blank"&gt;White Shadow&lt;/a&gt; @ 2015&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/div&gt;
  &lt;/body&gt;
  &lt;script src="/javascripts/jquery.js"&gt;&lt;/script&gt;
  &lt;script src="/javascripts/bootstrap.js"&gt;&lt;/script&gt;
&lt;/html&gt;
</code></pre>

<p>修改 public/stylesheets/style.css 如下：</p>
<pre class="default"><code class="default">
body {
  padding-top: 60px;
  padding-bottom: 40px;
}
</code></pre>

<p>运行 DEBUG=microblog:* npm start ，主页显示如下：<br><img src="/img/blog/1.3.png" alt=""></p>
<p>接下来在 views 文件夹下新建 login.ejs，内容如下：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;form class="form-horizontal" method="post"&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;用户登入&lt;/legend&gt;
    &lt;div class="control-group"&gt;
      &lt;label class="control-label" for="name"&gt;用户名&lt;/label&gt;
      &lt;div class="controls"&gt;
        &lt;input type="text" class="input-xlarge" id="name" name="name"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="control-group"&gt;
      &lt;label class="control-label" for="password"&gt;口令&lt;/label&gt;
      &lt;div class="controls"&gt;
        &lt;input type="password" class="input-xlarge" id="password" name="password"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-actions"&gt;
      &lt;button type="submit" class="btn btn-primary"&gt;登入&lt;/button&gt;
    &lt;/div&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>登录页面显示如下：<br><img src="/img/blog/1.4.png" alt=""><br>在 views 文件夹下新建 reg.ejs，内容如下：</p>
<pre class="default"><code class="default">
&lt;%- include header %&gt;
&lt;form class="form-horizontal" method="post"&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;用户注册&lt;/legend&gt;
    &lt;div class="control-group"&gt;
      &lt;label class="control-label" for="name"&gt;用户名&lt;/label&gt;
      &lt;div class="controls"&gt;
        &lt;input type="text" class="input-xlarge" id="name" name="name"&gt;
        &lt;p class="help-block"&gt;你的账户名称,用于登录和显示。&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="control-group"&gt;
      &lt;label class="control-label" for="password"&gt;口令&lt;/label&gt;
      &lt;div class="controls"&gt;
        &lt;input type="password" class="input-xlarge" id="password" name="password"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="control-group"&gt;
      &lt;label class="control-label" for="password-repeat"&gt;重复输入口令&lt;/label&gt;
      &lt;div class="controls"&gt;
        &lt;input type="password" class="input-xlarge" id="password-repeat" name="password-repeat"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="control-group"&gt;
      &lt;label class="control-label" for="email"&gt;邮箱&lt;/label&gt;
      &lt;div class="controls"&gt;
        &lt;input type="text" class="input-xlarge" id="email" name="email"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="form-actions"&gt;
      &lt;button type="submit" class="btn btn-primary"&gt;注册&lt;/button&gt;
    &lt;/div&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;%- include footer %&gt;
</code></pre>

<p>注册页面显示如下：<br><img src="/img/blog/1.5.png" alt=""><br>至此，未登录时的主页、注册页、登录页都已经完成。</p>
<p>现在，启动我们的博客看看吧。<br><br></p>
<h4 id="页面通知"><a href="#页面通知" class="headerlink" title="页面通知"></a>页面通知</h4><p><br><br>接下来我们实现用户的注册和登陆，在这之前我们需要引入 flash 模块来实现页面通知（即成功与错误信息的显示）的功能。</p>
<p>什么是<strong> flash? </strong></p>
<p>我们所说的 flash 即 connect-flash 模块<a href="https://github.com/jaredhanson/connect-flash" target="_blank" rel="external">(https://github.com/jaredhanson/connect-flash)</a>，flash 是一个在 session 中用于存储信息的特定区域。信息写入 flash ，下一次显示完毕后即被清除。典型的应用是结合重定向的功能，确保信息是提供给下一个被渲染的页面。</p>
<p>在命令行输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save connect-flash</div></pre></td></tr></table></figure></p>
<p>安装 connect-flash 模块。修改 app.js ，在<code class="pale">var settings = require(&apos;./settings&apos;);</code>后添加：</p>
<pre class="default"><code class="default">
var flash = require('connect-flash');
</code></pre>

<p>在<code class="pale">app.set(&#39;view engine&#39;, &#39;ejs&#39;);</code>后添加：</p>
<pre class="default"><code class="default">
app.use(flash());
</code></pre>

<p>现在我们就可以使用 flash 功能了。<br><br></p>
<h4 id="视图交互"><a href="#视图交互" class="headerlink" title="视图交互"></a>视图交互</h4><p><br><br>现在几乎已经万事俱备,只差视图的支持了。为了实现不同登录状态下页面呈现不同内容的功能,我们要创建动态视图助手,通过它我们才能在视图中访问会话中的用户数据。同时为了显示错误和成功的信息,也要在动态视图助手中增加响应的函数。</p>
<p>打开 app.js,在<code class="pale">app.use(&#39;/&#39;, routes);</code>前添加以下代码:</p>
<pre class="default"><code class="default">
app.use(function(req, res, next){
  console.log("app.usr local");
  res.locals.user = req.session.user;
  res.locals.post = req.session.post;
  var error = req.flash('error');
  res.locals.error = error.length ? error : null;<br>
  var success = req.flash('success');
  res.locals.success = success.length ? success : null;
  next();
});
</code></pre>

<p><br></p>
<h4 id="注册响应"><a href="#注册响应" class="headerlink" title="注册响应"></a>注册响应</h4><p><br><br>前面我们已经完成了注册页，当然现在点击注册是没有效果的，因为我们还没有实现处理 POST 请求的功能，下面就来实现它。</p>
<p>在 models 文件夹下新建 user.js，添加如下代码：</p>
<pre class="default"><code class="default">
var mongodb = require('./db');

function User(user) {
  this.name = user.name;
  this.password = user.password;
  this.email = user.email;
};

module.exports = User;

//存储用户信息
User.prototype.save = function(callback) {
  //要存入数据库的用户文档
  var user = {
      name: this.name,
      password: this.password,
      email: this.email
  };
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);//错误，返回 err 信息
    }
    //读取 users 集合
    db.collection('users', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);//错误，返回 err 信息
      }
      //将用户数据插入 users 集合
      collection.insert(user, {
        safe: true
      }, function (err, user) {
        mongodb.close();
        if (err) {
          return callback(err);//错误，返回 err 信息
        }
        callback(null, user[0]);//成功！err 为 null，并返回存储后的用户文档
      });
    });
  });
};

//读取用户信息
User.get = function(name, callback) {
  //打开数据库
  mongodb.open(function (err, db) {
    if (err) {
      return callback(err);//错误，返回 err 信息
    }
    //读取 users 集合
    db.collection('users', function (err, collection) {
      if (err) {
        mongodb.close();
        return callback(err);//错误，返回 err 信息
      }
      //查找用户名（name键）值为 name 一个文档
      collection.findOne({
        name: name
      }, function (err, user) {
        mongodb.close();
        if (err) {
          return callback(err);//失败！返回 err 信息
        }
        callback(null, user);//成功！返回查询的用户信息
      });
    });
  });
};
</code></pre>

<p>我们通过<code class="pale">User.prototype.save</code>实现了用户信息的存储，通过<code class="pale">User.get</code>实现了用户信息的读取。</p>
<p>打开 index.js ，在<code class="pale">var router = express.Router();</code>后面添加如下代码：</p>
<pre class="default"><code class="default">
var crypto = require('crypto'),
    User = require('../models/user.js');
</code></pre>

<p>通过<code class="pale">require()</code>引入 crypto 模块和 user.js 用户模型文件，crypto 是 Node.js 的一个核心模块，我们用它生成散列值来加密密码。</p>
<p>修改 index.js 中<code class="pale">router.post(&#39;/reg&#39;, function(req, res, next)</code>如下：</p>
<pre class="default"><code class="default">
router.post('/reg', function(req, res, next) {
  var name = req.body.name,
      password = req.body.password,
      password_re = req.body['password-repeat'];
  //检验用户两次输入的密码是否一致
  if (password_re != password) {
    req.flash('error', '两次输入的密码不一致!');
    return res.redirect('/reg');//返回注册页
  }
  //生成密码的 md5 值
  var md5 = crypto.createHash('md5'),
      password = md5.update(req.body.password).digest('hex');
  var newUser = new User({
      name: name,
      password: password,
      email: req.body.email
  });
  //检查用户名是否已经存在
  User.get(newUser.name, function (err, user) {
    if (err) {
      req.flash('error', err);
      return res.redirect('/');
    }
    if (user) {
      req.flash('error', '用户已存在!');
      return res.redirect('/reg');//返回注册页
    }
    //如果不存在则新增用户
    newUser.save(function (err, user) {
      if (err) {
        req.flash('error', err);
        return res.redirect('/reg');//注册失败返回主册页
      }
      req.session.user = newUser;//用户信息存入 session
      req.flash('success', '注册成功!');
      res.redirect('/');//注册成功后返回主页
    });
  });
});
</code></pre>

<p>注意：我们把用户信息存储在了 session 里，以后就可以通过 req.session.user 读取用户信息。</p>
<ul>
<li><strong> req.body </strong> ： 就是 POST 请求信息解析过后的对象，例如我们要访问 POST 来的表单内的 name=&quot;password&quot; 域的值，只需访问 req.body[&#39;password&#39;] 或 req.body.password 即可。</li>
<li><strong> res.redirect </strong> ： 重定向功能，实现了页面的跳转，更多关于 res.redirect 的信息请查阅：<br><a href="http://expressjs.com/api.html#res.redirect" target="_blank" rel="external">http://expressjs.com/api.html#res.redirect</a> 。</li>
<li><strong> User </strong> ：在前面的代码中，我们直接使用了 User 对象。User 是一个描述数据的对象，即 MVC 架构中的模型。前面我们使用了许多视图和控制器，这是第一次接触到模型。与视图和控制器不同，模型是真正与数据打交道的工具，没有模型，网站就只是一个外壳，不能发挥真实的作用，因此它是框架中最根本的部分。</li>
</ul>
<p>现在，启动应用，在浏览器输入 localhost:3000 注册试试吧！注册成功后显示如下：<br><img src="/img/blog/1.8.png" alt=""></p>
<p>这样我们并不知道是否注册成功，我们查看数据库中是否存入了用户的信息，打开一个命令行（保证数据库已打开的前提下），输入：<br><img src="/img/blog/1.9.png" alt=""></p>
<p>可以看到，用户信息已经成功存入数据库。</p>
<p>接下来我们实现当注册成功返回主页时，导航显示 HOME 、POST 、LOGOUT ，主体顶部显示 注册成功！ 字样，即添加 flash 的页面通知功能。</p>
<p>修改 header.ejs，将<code class="pale">&lt;ul class=&quot;nav&quot;&gt;&lt;/ul&gt;</code>修改如下：</p>
<pre class="default"><code class="default">
&lt;ul class="nav"&gt;
  &lt;li class="active"&gt;&lt;a href="/"&gt;首页&lt;/a&gt;&lt;/li&gt;
  &lt;% if (user) { %&gt;
    &lt;li&gt;&lt;a href="/post"&gt;发表&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/logout"&gt;登出&lt;/a&gt;&lt;/li&gt;
  &lt;% } else { %&gt;
    &lt;li&gt;&lt;a href="/login"&gt;登入&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/reg"&gt;注册&lt;/a&gt;&lt;/li&gt;
  &lt;% } %&gt;
&lt;/ul&gt;
</code></pre>

<p>在 views 文件夹下新建 alert.ejs，添加如下代码：</p>
<pre class="default"><code class="default">
&lt;% if (success) { %&gt;
  &lt;div class="alert alert-success"&gt;&lt;%= success %&gt;&lt;/div&gt;
&lt;% } %&gt;
&lt;% if (error) { %&gt;
  &lt;div class="alert alert-error"&gt;&lt;%= error %&gt;&lt;/div&gt;
&lt;% } %&gt;
</code></pre>

<p>修改<code class="pale">views/index.ejs</code>、<code class="pale">views/login.ejs</code>、<code class="pale">views/reg.ejs</code>在<code class="pale">&lt;%- include header %&gt;</code>后添加：</p>
<pre class="default"><code class="default">
&lt;%- include alert %&gt;
</code></pre>

<p>现在运行我们的博客，注册成功后显示如下：<br><img src="/img/blog/1.10.png" alt=""></p>
<p>我们通过对 session 的使用实现了对用户状态的检测，再根据不同的用户状态显示不同的导航信息。<br>简单解释一下流程：用户在注册成功后，把用户信息存入 session ，页面跳转到主页显示 注册成功！ 的字样。同时把 session 中的用户信息赋给变量 user ，在渲染 index.ejs 文件时通过检测 user 判断用户是否在线，根据用户状态的不同显示不同的导航信息。<br><br></p>
<h4 id="登录与登出响应"><a href="#登录与登出响应" class="headerlink" title="登录与登出响应"></a>登录与登出响应</h4><p><br><br>现在我们来实现用户登录的功能。</p>
<p>打开 index.js ，将<code class="pale">router.post(&#39;/login&#39;, function(req, res, next)</code>修改如下：</p>
<pre class="default"><code class="default">
router.post('/login', function(req, res, next) {
  //生成密码的 md5 值
  var md5 = crypto.createHash('md5'),
      password = md5.update(req.body.password).digest('hex');
  //检查用户是否存在
  User.get(req.body.name, function (err, user) {
    if (!user) {
      req.flash('error', '用户不存在!');
      return res.redirect('/login');//用户不存在则跳转到登录页
    }
    //检查密码是否一致
    if (user.password != password) {
      req.flash('error', '密码错误!');
      return res.redirect('/login');//密码错误则跳转到登录页
    }
    //用户名密码都匹配后，将用户信息存入 session
    req.session.user = user;
    req.flash('success', '登陆成功!');
    res.redirect('/');//登陆成功后跳转到主页
  });
});
</code></pre>

<p>接下来我们实现登出响应。修改<code class="pale">router.get(&#39;/logout&#39;, function(req, res, next)</code>如下：</p>
<pre class="default"><code class="default">
router.get('/logout', function(req, res, next) {
  req.session.user = null;
  req.flash('success', '登出成功!');
  res.redirect('/');//登出成功后跳转到主页
});
</code></pre>

<p>注意：通过把 req.session.user 赋值 null 丢掉 session 中用户的信息，实现用户的退出。</p>
<p>登录后页面显示如下：<br><img src="/img/blog/1.11.png" alt=""></p>
<p>登出后页面显示如下：<br><img src="/img/blog/1.12.png" alt=""></p>
<p>至此，我们实现了用户注册与登陆的功能，并且根据用户登录状态显示不同的导航。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.3]]></title>
      <url>http://yoursite.com/2016/08/09/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-1-3/</url>
      <content type="html"><![CDATA[<h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库<hr></h3><h4 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h4><p><br>数据库虽然安装并启动成功了，但我们需要连接数据库后才能使用数据库。怎么才能在 Node.js 中使用 MongoDB 呢？我们使用官方提供的 node-mongodb-native 驱动模块，打开命令行，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save mongodb</div></pre></td></tr></table></figure></p>
<p>稍等片刻后 mongodb 模块就下载并安装完成了。</p>
<p>接下来在工程的根目录中创建 settings.js 文件，用于保存该博客工程的配置信息，比如数据库的连接信息。我们将数据库命名为 blog，因为数据库服务器在本地，所以 settings.js 文件的内容如下：</p>
<pre class="default"><code class="default">
module.exports = {
  cookieSecret: 'myblog',
  db: 'blog',
  host: 'localhost',
  port: 27017
};
</code></pre>

<p>其中 db 是数据库的名称，host 是数据库的地址，port是数据库的端口号，cookieSecret 用于 Cookie 加密与数据库无关，我们留作后用。 接下来在根目录下新建 models 文件夹，并在 models 文件夹下新建 db.js ，添加如下代码：</p>
<pre class="default"><code class="default">
var settings = require('../settings'),
    Db = require('mongodb').Db,
    Connection = require('mongodb').Connection,
    Server = require('mongodb').Server;
module.exports = new Db(settings.db, new Server(settings.host, settings.port), {safe: true});
</code></pre>
其中通过<code class="pale">new Db(settings.db, new Server(settings.host, settings.port), {safe: true});</code>设置数据库名、数据库地址和数据库端口创建了一个数据库连接实例，并通过<code class="pale">module.exports</code>导出该实例。这样，我们就可以通过 require 这个文件来对数据库进行读写了。 打开 app.js，在<code class="pale">var routes = require('./routes/index');</code>下添加：
<pre class="default"><code class="default">
var settings = require('./settings');
</code></pre><br>
<h4>会话支持</h4>
<br><blockquote><p>会话是一种持久的网络协议，用于完成服务器和客户端之间的一些交互行为。会话是一个比连接粒度更大的概念， 一次会话可能包含多次连接，每次连接都被认为是会话的一次操作。在网络应用开发中，有必要实现会话以帮助用户交互。例如网上购物的场景，用户浏览了多个页面，购买了一些物品，这些请求在多次连接中完成。许多应用层网络协议都是由会话支持的，如 FTP、Telnet 等，而 HTTP 协议是无状态的，本身不支持会话，因此在没有额外手段的帮助下，前面场景中服务器不知道用户购买了什么。</p>
<p>为了在无状态的 HTTP 协议之上实现会话，Cookie 诞生了。Cookie 是一些存储在客户端的信息，每次连接的时候由浏览器向服务器递交，服务器也向浏览器发起存储 Cookie 的请求，依靠这样的手段服务器可以识别客户端。我们通常意义上的 HTTP 会话功能就是这样实现的。具体来说，浏览器首次向服务器发起请求时，服务器生成一个唯一标识符并发送给客户端浏览器，浏览器将这个唯一标识符存储在 Cookie 中，以后每次再发起请求，客户端浏览器都会向服务器传送这个唯一标识符，服务器通过这个唯一标识符来识别用户。 对于开发者来说，我们无须关心浏览器端的存储，需要关注的仅仅是如何通过这个唯一标识符来识别用户。很多服务端脚本语言都有会话功能，如 PHP，把每个唯一标识符存储到文件中。<br><br></p>
<p class="end">——《Node.js开发指南》</p></blockquote>
express 也提供了会话中间件，默认情况下是把用户信息存储在内存中，但我们既然已经有了 MongoDB，不妨把会话信息存储在数据库中，便于持久维护。为了使用这一功能，我们需要借助 express-session 和 connect-mongo 这两个第三方中间件。

在命令行输入：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install --save express-session</div><div class="line">$ npm install --save connect-mongo</div></pre></td></tr></table></figure>

安装模块,打开 app.js ，添加以下代码：
<pre class="default"><code class="default">
var session = require('express-session');
var MongoStore = require('connect-mongo')(session);

app.use(session({
  secret: settings.cookieSecret,
  key: settings.db,//cookie name
  cookie: {maxAge: 1000 * 60 * 60 * 24 * 30},//30 days
  store: new MongoStore({
    url: 'mongodb://localhost/blog'
  })
}));
</code></pre>

<p>使用 express-session 和 connect-mongo 模块实现了将会化信息存储到mongoldb中。secret 用来防止篡改 cookie，key 的值为 cookie 的名字，通过设置 cookie 的 maxAge 值设定 cookie 的生存期，这里我们设置 cookie 的生存期为 30 天，设置它的 store 参数为 MongoStore 实例，把会话信息存储到数据库中，以避免丢失。在后面的小节中，我们可以通过 req.session 获取当前用户的会话对象，获取用户的相关信息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.2]]></title>
      <url>http://yoursite.com/2016/08/08/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-1-2/</url>
      <content type="html"><![CDATA[<h3 id="搭建多人博客"><a href="#搭建多人博客" class="headerlink" title="搭建多人博客"></a>搭建多人博客<hr></h3><h4 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h4><p>搭建一个简单的具有多人注册、登录、发表文章、登出功能的博客。</p>
<h4 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h4><blockquote><p>未登录： 主页导航显示 home、login、register，主体区显示已发表的文章、发表日期及作者。</p>
<p>登陆后： 主页导航显示 home、post、logout，主体区显示已发表的文章、发表日期及作者。</p>
<p>用户登录、注册、发表成功以及登出后都返回到主页。</p>
</blockquote>
<p>未登录：</p>
<ul>
<li><p><strong> 主页： </strong><br><img src="/img/blog/1.3.png" alt=""></p>
</li>
<li><p><strong> 登录页： </strong><br><img src="/img/blog/1.4.png" alt=""></p>
</li>
<li><p><strong> 注册页： </strong><br><img src="/img/blog/1.5.png" alt=""></p>
</li>
</ul>
<p>登录后：</p>
<ul>
<li><p><strong> 主页: </strong><br><img src="/img/blog/1.6.png" alt=""></p>
</li>
<li><p><strong> 发表页： </strong><br><img src="/img/blog/1.7.png" alt=""></p>
</li>
</ul>
<p>注意：没有登出页，当点击 LOGOUT 后，退出登陆并返回到主页。</p>
<h4 id="路由规划"><a href="#路由规划" class="headerlink" title="路由规划"></a>路由规划</h4><p>我们已经把设计的构想图贴出来了，接下来的任务就是完成路由规划了。路由规划，或者说控制器规划是整个网站的骨架部分，因为它处于整个架构的枢纽位置，相当于各个接口之间的粘合剂，所以应该优先考虑。</p>
<ul>
<li>根据构思的设计图，我们作以下路由规划：<blockquote><p>/ ：首页<br>/login ：用户登录<br>/reg ：用户注册<br>/post ：发表文章<br>/logout ：登出</p>
</blockquote>
</li>
</ul>
<p>我们要求 <strong> /login </strong> 和 <strong> /reg </strong> 只能是未登录的用户访问，而 <strong> /post </strong> 和 <strong> /logout </strong> 只能是已登录的用户访问。左侧导航列表则针对已登录和未登录的用户显示不同的内容。</p>
<ul>
<li>修改 index.js 如下：</li>
</ul>
<pre class="default"><code class="default">
var express = require('express');
var router = express.Router();

&#47;&#42; GET home page. &#42;&#47;
router.get('/', function(req, res, next) {
  res.render('index', { title: '首页' });
});

router.get('/reg', function(req, res, next) {
  res.render('reg', { title: '注册' });
});

router.post('/reg', function(req, res, next) {

});

router.get('/login', function(req, res, next) {
  res.render('login', { title: '登入' });
});

router.post('/login', function(req, res, next) {

});

router.get('/post', function(req, res, next) {
  res.render('post', { title: '发表' });
});

router.post('/post', function(req, res, next) {

});

router.get('/logout', function(req, res, next) {

});

module.exports = router;
</code></pre>

<p>如何针对已登录和未登录的用户显示不同的内容呢？或者说如何判断用户是否已经登陆了呢？进一步说如何记住用户的登录状态呢？我们通过引入会话（session）机制记录用户登录状态，还要访问数据库来保存和读取用户信息。下一节我们将学习如何使用数据库。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.1]]></title>
      <url>http://yoursite.com/2016/08/08/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2%20Lesson%201-1/</url>
      <content type="html"><![CDATA[<h2 id="初始化了一个工程项目"><a href="#初始化了一个工程项目" class="headerlink" title="初始化了一个工程项目"></a>初始化了一个工程项目</h2><h4 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h4><blockquote><p>Node.js ： 4.4.7</p>
<p>Express ： 4.13.4</p>
<p>MongoDB ： 3.2.8</p>
</blockquote>
<h4 id="新建一个工程"><a href="#新建一个工程" class="headerlink" title="新建一个工程"></a>新建一个工程</h4><p>在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p workspace/blog &amp;&amp; <span class="built_in">cd</span> workspace/blog</div><div class="line">$ express <span class="_">-e</span> microblog</div><div class="line">$ <span class="built_in">cd</span> microblog &amp;&amp; npm install</div></pre></td></tr></table></figure></p>
<p>初始化一个 express 项目并安装所需模块，如下所示：<br><blockquote><p>create : microblog<br>create : microblog/package.json<br>create : microblog/app.js<br>create : microblog/public<br>create : microblog/public/images<br>create : microblog/public/javascripts<br>create : microblog/routes<br>create : microblog/routes/index.js<br>create : microblog/routes/users.js<br>create : microblog/views<br>create : microblog/views/index.ejs<br>create : microblog/views/error.ejs<br>create : microblog/public/stylesheets<br>create : microblog/public/stylesheets/style.css<br>create : microblog/bin<br>create : microblog/bin/www</p>
<p>install dependencies:<br>  $ cd microblog &amp;&amp; npm install</p>
<p>run the app:<br>  $ DEBUG=microblog:* npm start</p>
</blockquote></p>
<p>然后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ DEBUG=microblog:* npm start</div></pre></td></tr></table></figure></p>
<p>在浏览器里访问 localhost:3000，如下图所示：<br><img src="/img/blog/1.2.jpg" alt=""></p>
<p>至此，我们用 express 初始化了一个工程项目，并指定使用 ejs 模板引擎，下一节我们讲解工程的内部结构。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
