<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.2]]></title>
      <url>http://yoursite.com/2016/08/08/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2-Lesson-1-2/</url>
      <content type="html"><![CDATA[<h2 id="搭建多人博客"><a href="#搭建多人博客" class="headerlink" title="搭建多人博客"></a>搭建多人博客</h2><h4 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h4><p>搭建一个简单的具有多人注册、登录、发表文章、登出功能的博客。</p>
<h4 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h4><blockquote><p>未登录： 主页导航显示 home、login、register，主体区显示已发表的文章、发表日期及作者。</p>
<p>登陆后： 主页导航显示 home、post、logout，主体区显示已发表的文章、发表日期及作者。</p>
<p>用户登录、注册、发表成功以及登出后都返回到主页。</p>
</blockquote>
<p>未登录：</p>
<ul>
<li><p><strong> 主页： </strong><br><img src="/img/blog/1.3.png" alt=""></p>
</li>
<li><p><strong> 登录页： </strong><br><img src="/img/blog/1.4.png" alt=""></p>
</li>
<li><p><strong> 注册页： </strong><br><img src="/img/blog/1.5.png" alt=""></p>
</li>
</ul>
<p>登录后：</p>
<ul>
<li><p><strong> 主页: </strong><br><img src="/img/blog/1.6.png" alt=""></p>
</li>
<li><p><strong> 发表页： </strong><br><img src="/img/blog/1.7.png" alt=""></p>
</li>
</ul>
<p>注意：没有登出页，当点击 LOGOUT 后，退出登陆并返回到主页。</p>
<h4 id="路由规划"><a href="#路由规划" class="headerlink" title="路由规划"></a>路由规划</h4><p>我们已经把设计的构想图贴出来了，接下来的任务就是完成路由规划了。路由规划，或者说控制器规划是整个网站的骨架部分，因为它处于整个架构的枢纽位置，相当于各个接口之间的粘合剂，所以应该优先考虑。</p>
<ul>
<li>根据构思的设计图，我们作以下路由规划：<blockquote><p>/ ：首页<br>/login ：用户登录<br>/reg ：用户注册<br>/post ：发表文章<br>/logout ：登出</p>
</blockquote>
</li>
</ul>
<p>我们要求 <strong> /login </strong> 和 <strong> /reg </strong> 只能是未登录的用户访问，而 <strong> /post </strong> 和 <strong> /logout </strong> 只能是已登录的用户访问。左侧导航列表则针对已登录和未登录的用户显示不同的内容。</p>
<ul>
<li>修改 index.js 如下：<blockquote><p>var express = require(‘express’);<br>var router = express.Router();</p>
<p>router.get(‘/‘, function(req, res, next) {<br>  res.render(‘index’, { title: ‘首页’ });<br>});</p>
<p>router.get(‘/reg’, function(req, res, next) {<br>  res.render(‘reg’, { title: ‘注册’ });<br>});</p>
<p>router.post(‘/reg’, function(req, res, next) {</p>
<p>});</p>
<p>router.get(‘/login’, function(req, res, next) {<br>  res.render(‘login’, { title: ‘登入’ });<br>});</p>
<p>router.post(‘/login’, function(req, res, next) {</p>
<p>});</p>
<p>router.get(‘/post’, function(req, res, next) {<br>  res.render(‘post’, { title: ‘发表’ });<br>});</p>
<p>router.post(‘/post’, function(req, res, next) {</p>
<p>});</p>
<p>router.get(‘/logout’, function(req, res, next) {</p>
<p>});</p>
<p>module.exports = router;</p>
</blockquote>
如何针对已登录和未登录的用户显示不同的内容呢？或者说如何判断用户是否已经登陆了呢？进一步说如何记住用户的登录状态呢？我们通过引入会话（session）机制记录用户登录状态，还要访问数据库来保存和读取用户信息。下一节我们将学习如何使用数据库。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个简单的博客 Lesson 1.1]]></title>
      <url>http://yoursite.com/2016/08/08/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%9A%E5%AE%A2%20Lesson%201.1/</url>
      <content type="html"><![CDATA[<h2 id="初始化了一个工程项目"><a href="#初始化了一个工程项目" class="headerlink" title="初始化了一个工程项目"></a>初始化了一个工程项目</h2><h4 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h4><blockquote><p>Node.js ： 4.4.7</p>
<p>Express ： 4.13.4</p>
<p>MongoDB ： 3.2.8</p>
</blockquote>
<h4 id="新建一个工程"><a href="#新建一个工程" class="headerlink" title="新建一个工程"></a>新建一个工程</h4><p>在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p workspace/blog &amp;&amp; <span class="built_in">cd</span> workspace/blog</div><div class="line">$ express <span class="_">-e</span> microblog</div><div class="line">$ <span class="built_in">cd</span> microblog &amp;&amp; npm install</div></pre></td></tr></table></figure></p>
<p>初始化一个 express 项目并安装所需模块，如下所示：<br><blockquote><p>create : microblog<br>create : microblog/package.json<br>create : microblog/app.js<br>create : microblog/public<br>create : microblog/public/images<br>create : microblog/public/javascripts<br>create : microblog/routes<br>create : microblog/routes/index.js<br>create : microblog/routes/users.js<br>create : microblog/views<br>create : microblog/views/index.ejs<br>create : microblog/views/error.ejs<br>create : microblog/public/stylesheets<br>create : microblog/public/stylesheets/style.css<br>create : microblog/bin<br>create : microblog/bin/www</p>
<p>install dependencies:<br>  $ cd microblog &amp;&amp; npm install</p>
<p>run the app:<br>  $ DEBUG=microblog:* npm start</p>
</blockquote></p>
<p>然后运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ DEBUG=microblog:* npm start</div></pre></td></tr></table></figure></p>
<p>在浏览器里访问 localhost:3000，如下图所示：<br><img src="/img/blog/1.2.jpg" alt=""></p>
<p>至此，我们用 express 初始化了一个工程项目，并指定使用 ejs 模板引擎，下一节我们讲解工程的内部结构。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/08/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
